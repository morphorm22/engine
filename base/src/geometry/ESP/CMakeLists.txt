set(LIB_NAMES)

set(LIB_NAME GeometryESP)
set(LIB_NAMES ${LIB_NAMES} ${LIB_NAME})

set(${LIB_NAME}_SOURCES
       Plato_ESP.cpp
   )

set(${LIB_NAME}_HEADERS
       Plato_ESP.hpp
   )

set(${LIB_NAME}_TYPE STATIC)

set(LIB_NAME GeometryESPImpl)
set(LIB_NAMES ${LIB_NAMES} ${LIB_NAME})

set(${LIB_NAME}_SOURCES
       Plato_ESP_Impl.cpp
       bodyTess.c
   )

set(${LIB_NAME}_HEADERS
       bodyTess.h
       Plato_ESP.hpp
   )

set(${LIB_NAME}_TYPE SHARED)

INCLUDE_DIRECTORIES(${PLATO_INCLUDES})

FOREACH(PLATO_LIB ${LIB_NAMES})
  add_library(Plato${PLATO_LIB} ${${PLATO_LIB}_TYPE} ${${PLATO_LIB}_SOURCES} ${${PLATO_LIB}_HEADERS})
  if(${${PLATO_LIB}_TYPE} STREQUAL "STATIC")
    set(ADD_PLATO_LIBRARIES ${ADD_PLATO_LIBRARIES} Plato${PLATO_LIB})
  else()
    target_link_libraries(Plato${PLATO_LIB} PlatoGeometryESP PlatoExceptions ${OCSM_LIB} ${ESP_LIB})
  endif()
ENDFOREACH()

set(PLATO_LIBRARIES ${PLATO_LIBRARIES} ${ADD_PLATO_LIBRARIES})
set(PLATO_LIBRARIES ${PLATO_LIBRARIES} ${ADD_PLATO_LIBRARIES} PARENT_SCOPE)

if( CMAKE_INSTALL_PREFIX )
 FOREACH(PLATO_LIB ${LIB_NAMES})
  install( TARGETS Plato${PLATO_LIB} EXPORT Plato${PLATO_LIB}
           LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
           ARCHIVE DESTINATION ${CMAKE_INSTALL_PREFIX}/lib
           PUBLIC_HEADER DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
  install( FILES ${${PLATO_LIB}_HEADERS} DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
 ENDFOREACH()
 install( FILES ${LIBLESS_HEADERS} DESTINATION ${CMAKE_INSTALL_PREFIX}/include)
endif()

#if( UNIT_TESTING )
#  add_subdirectory(./unittest)
#endif()
