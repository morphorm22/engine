#! /usr/bin/python3

import argparse
import plato_config
import subprocess

def report(action):
  print(" Plato CLI $>")
  print(" Plato CLI $> " + action)
  print(" Plato CLI $>")

def execute_analyze(args):
  print("executing analyze:")
  print("analyze --input-config=" + args.input)

def write_analyze_template(args):
  print("writing analyze template to console: " + args.template)

def list_analyze_templates(args):
  print("listing analyze templates to console")


def execute_plato(args):
  print("executing plato:")
  print("XMLGenerator " + args.input)
  print("source mpirun.source")

def write_plato_template(args):
  print(args)
  print("writing plato template to console: " + args.template)

def list_plato_templates(args):
  print("listing plato templates to console")

def dictToArgs(dictionary):
  retVal = ""
  for key, value in dictionary.items():
    retVal += (" " + key + "=" + str(value))

  return retVal

def esp_action(args):
  report(action="Generating exodus mesh from csm model")

  argsDict = {'modelName': args.input}

  if args.output != None:
    argsDict['meshName'] =  args.output

  if args.min_scale != None:
    argsDict['minScale'] =  args.min_scale

  if args.tesselation != None:
    argsDict['etoName'] =  args.tesselation

  if args.mesh_scale != None:
    argsDict['meshLengthFactor'] = args.mesh_scale

  scriptFilePath = plato_config.esp_dir + "/mesh.py"

  shell_command = "python " + scriptFilePath + " " + dictToArgs(argsDict)

  print(shell_command)

  subprocess.call(shell_command.split())


def xtk_action(args):
  print('calling xtk.')
  print(args)

def gmsh_action(args):
  print('calling Gmsh.')
  print(args)

def cogent_action(args):
  print('calling Cogent.')
  print(args)

def cubit_action(args):
  print('calling Cubit.')
  print(args)


def geometry_action(args):
  print('dealing with some geometry in this hizzow.')
  print(args)

def analyze_action(args):

  ## if an input file was provided call analyze
  if args.input != None:
    execute_analyze(args)
    return

  ## if a template is requested
  if args.template != None:
    write_analyze_template(args)
    return

  if args.list_templates == True:
    list_analyze_templates(args)
    return
  


def optimize_action(args):

  ## if an input file was provided call plato
  if args.input != None:
    execute_plato(args)
    return

  ## if a template is requested
  if args.template != None:
    write_plato_template(args)
    return

  if args.list_templates == True:
    list_plato_templates(args)
    return



## create top level parser
#
parser = argparse.ArgumentParser(prog='plato', description='Plato command line interface (CLI)')
parser.set_defaults(func=lambda x: parser.print_usage())


## add subparsers container
#
subparsers = parser.add_subparsers(help='plato sub-command help', dest='plato_execmode')

## setup geometry sub parser
#
geometry_parser = subparsers.add_parser('geometry', help='Plato Geometry options', aliases=['g'])
geometry_parser.set_defaults(func=lambda x: geometry_parser.print_usage())
geo_subparsers = geometry_parser.add_subparsers(help='geometry sub-command help', dest='geo_execmode')

# geometry - esp
esp_parser = geo_subparsers.add_parser('esp', help='ESP options')
esp_parser.add_argument('--input', help='Input file name.', required=True)

esp_parser.add_argument('--output', help='Output file name. If not specified, base name of input file is used.')

esp_parser.add_argument('--tesselation', help='Tesellation output file name. If not specified, tesselation is not generated.')

esp_parser.add_argument('--mesh-scale', dest='mesh_scale', \
  help='Scale factor applied to meshSize specified in input model. Default value is 1.0. refLen = meshScale*meshSize')

esp_parser.add_argument('--min-scale', dest='min_scale', \
  help='Minimum spacing bound relative to refLen.  Default value is 0.2. minSpacing = minScale*refLen')

esp_parser.add_argument('--max-scale', dest='max_scale', \
  help='Maximum spacing bound relative to refLen.  Default value is 1.0. maxSpacing = maxScale*refLen')

esp_parser.set_defaults(func=esp_action)

# geometry - xtk
xtk_parser = geo_subparsers.add_parser('xtk', help='XTK options')
xtk_parser.add_argument('-i', '--input', help='input file name')
xtk_parser.set_defaults(func=xtk_action)

# geometry - gmsh
gmsh_parser = geo_subparsers.add_parser('gmsh', help='Gmsh options')
gmsh_parser.add_argument('-i', '--input', help='input file name')
gmsh_parser.set_defaults(func=gmsh_action)

# geometry - cogent
cogent_parser = geo_subparsers.add_parser('cogent', help='Cogent options')
cogent_parser.add_argument('-i', '--input', help='input file name')
cogent_parser.set_defaults(func=cogent_action)

# geometry - cubit
cubit_parser = geo_subparsers.add_parser('cubit', help='Cubit options')
cubit_parser.add_argument('-i', '--input', help='input file name')
cubit_parser.set_defaults(func=cubit_action)


## setup analyze sub parser
#
analyze_parser = subparsers.add_parser('analyze', help='Plato Analyze options', aliases=['a'])
a_group = analyze_parser.add_mutually_exclusive_group(required=True)
a_group.add_argument('-i', '--input', help='input file name')
a_group.add_argument('-t', '--template', help='template name')
a_group.add_argument('-l', '--list-templates', dest='list_templates', action='store_true', help='list available templates')
analyze_parser.set_defaults(func=analyze_action)

## setup optimize sub parser
#
optimize_parser = subparsers.add_parser('optimize', help='Plato Optimize options', aliases=['o'])
o_group = optimize_parser.add_mutually_exclusive_group(required=True)
o_group.add_argument('-i', '--input', help='input file name')
o_group.add_argument('-t', '--template', help='template name')
o_group.add_argument('-l', '--list-templates', dest='list_templates', action='store_true', help='list available templates')
optimize_parser.set_defaults(func=optimize_action)


## parse
#
args = parser.parse_args()
args.func(args)
